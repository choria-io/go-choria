[1mdiff --git a/broker/network/network.go b/broker/network/network.go[m
[1mindex 092cf1d6..0dfaed86 100644[m
[1m--- a/broker/network/network.go[m
[1m+++ b/broker/network/network.go[m
[36m@@ -55,11 +55,6 @@[m [mfunc NewServer(c inter.Framework, bi BuildInfoProvider, debug bool) (s *Server,[m
 		mu:      &sync.Mutex{},[m
 	}[m
 [m
[31m-	// Validate timeouts[m
[31m-	if s.config.Choria.NetworkAuthTimeout > 60*time.Second || s.config.Choria.NetworkTLSTimeout > 60*time.Second {[m
[31m-		return nil, fmt.Errorf("NetworkAuthTimeout and NetworkTLSTimeout must not exceed 60 seconds")[m
[31m-	}[m
[31m-[m
 	if s.config.Identity != "" {[m
 		s.opts.ServerName = s.config.Identity[m
 	}[m
[1mdiff --git a/config/choria.go b/config/choria.go[m
[1mindex 50c44f61..d596142e 100644[m
[1m--- a/config/choria.go[m
[1m+++ b/config/choria.go[m
[36m@@ -80,8 +80,8 @@[m [mtype ChoriaPluginConfig struct {[m
 	NetworkStreamStore                 string        `confkey:"plugin.choria.network.stream.store" type:"path_string"`                                             // Enables Streaming data persistence stored in this path[m
 	NetworkSystemPassword              string        `confkey:"plugin.choria.network.system.password"`                                                             // Password used to access the Choria system account[m
 	NetworkSystemUsername              string        `confkey:"plugin.choria.network.system.user"`                                                                 // Username used to access the Choria system account[m
[31m-	NetworkTLSTimeout                  time.Duration `confkey:"plugin.choria.network.tls_timeout" type:"duration" default:"2s"`                                    // Time to allow for TLS connections to establish, increase on slow or very large networks[m
[31m-	NetworkAuthTimeout                 time.Duration `confkey:"plugin.choria.network.auth_timeout" type:"duration" default:"2s"`                                   // Time to allow for clients to authenticate, increase on slow or very large networks[m
[32m+[m	[32mNetworkTLSTimeout                  time.Duration `confkey:"plugin.choria.network.tls_timeout" type:"duration" default:"2s" validate:"maxduration=60s"`         // Time to allow for TLS connections to establish, increase on slow or very large networks[m
[32m+[m	[32mNetworkAuthTimeout                 time.Duration `confkey:"plugin.choria.network.auth_timeout" type:"duration" default:"2s" validate:"maxduration=60s"`        // Time to allow for clients to authenticate, increase on slow or very large networks[m
 	NetworkWebSocketAdvertise          string        `confkey:"plugin.choria.network.websocket_advertise" url:"https://choria.io/docs/deployment/broker/"`         // The URL to advertise for websocket connections[m
 	NetworkWebSocketPort               int           `confkey:"plugin.choria.network.websocket_port" url:"https://choria.io/docs/deployment/broker/"`              // Port to listen on for websocket connections[m
 	NetworkWriteDeadline               time.Duration `confkey:"plugin.choria.network.write_deadline" type:"duration" default:"10s"`                                // How long to allow clients to process traffic before treating them as slow, increase this on large networks or slow networks[m
[1mdiff --git a/validator/duration/duration.go b/validator/duration/duration.go[m
[1mindex 8b30557b..79655e2f 100644[m
[1m--- a/validator/duration/duration.go[m
[1m+++ b/validator/duration/duration.go[m
[36m@@ -6,6 +6,7 @@[m [mpackage duration[m
 [m
 import ([m
 	"fmt"[m
[32m+[m	[32m"github.com/choria-io/go-choria/validator/shared"[m
 	"reflect"[m
 	"time"[m
 )[m
[36m@@ -28,3 +29,15 @@[m [mfunc ValidateStructField(value reflect.Value, tag string) (bool, error) {[m
 [m
 	return ValidateString(value.String())[m
 }[m
[32m+[m
[32m+[m[32m// maxduration validator for time.Duration fields[m
[32m+[m[32m// (moved to validator/maxduration)[m
[32m+[m
[32m+[m[32mfunc init() {[m
[32m+[m	[32mshared.RegisterValidator("duration", func(v reflect.Value, t reflect.StructField, tag string) error {[m
[32m+[m		[32mif ok, err := ValidateStructField(v, tag); !ok {[m
[32m+[m			[32mreturn fmt.Errorf("%s duration validation failed: %s", t.Name, err)[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil[m
[32m+[m	[32m}, true)[m
[32m+[m[32m}[m
[1mdiff --git a/validator/enum/enum.go b/validator/enum/enum.go[m
[1mindex 37eaa356..905fba1e 100644[m
[1m--- a/validator/enum/enum.go[m
[1m+++ b/validator/enum/enum.go[m
[36m@@ -6,6 +6,7 @@[m [mpackage enum[m
 [m
 import ([m
 	"fmt"[m
[32m+[m	[32m"github.com/choria-io/go-choria/validator/shared"[m
 	"reflect"[m
 	"regexp"[m
 	"strings"[m
[36m@@ -68,3 +69,12 @@[m [mfunc ValidateStructField(value reflect.Value, tag string) (bool, error) {[m
 		return false, fmt.Errorf("cannot valid data of type %s for enums", value.Kind().String())[m
 	}[m
 }[m
[32m+[m
[32m+[m[32mfunc init() {[m
[32m+[m	[32mshared.RegisterValidator("enum", func(v reflect.Value, t reflect.StructField, tag string) error {[m
[32m+[m		[32mif ok, err := ValidateStructField(v, tag); !ok {[m
[32m+[m			[32mreturn fmt.Errorf("%s enum validation failed: %s", t.Name, err)[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil[m
[32m+[m	[32m}, true)[m
[32m+[m[32m}[m
[1mdiff --git a/validator/ipaddress/ipaddress.go b/validator/ipaddress/ipaddress.go[m
[1mindex 7195bb7a..6e8d8899 100644[m
[1m--- a/validator/ipaddress/ipaddress.go[m
[1m+++ b/validator/ipaddress/ipaddress.go[m
[36m@@ -6,6 +6,7 @@[m [mpackage ipaddress[m
 [m
 import ([m
 	"fmt"[m
[32m+[m	[32m"github.com/choria-io/go-choria/validator/shared"[m
 	"net"[m
 	"reflect"[m
 )[m
[36m@@ -29,3 +30,12 @@[m [mfunc ValidateStructField(value reflect.Value, tag string) (bool, error) {[m
 [m
 	return ValidateString(value.String())[m
 }[m
[32m+[m
[32m+[m[32mfunc init() {[m
[32m+[m	[32mshared.RegisterValidator("ipaddress", func(v reflect.Value, t reflect.StructField, tag string) error {[m
[32m+[m		[32mif ok, err := ValidateStructField(v, tag); !ok {[m
[32m+[m			[32mreturn fmt.Errorf("%s IP address validation failed: %s", t.Name, err)[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil[m
[32m+[m	[32m}, false)[m
[32m+[m[32m}[m
[1mdiff --git a/validator/ipv4/ipv4.go b/validator/ipv4/ipv4.go[m
[1mindex b2a428a9..314f2dd2 100644[m
[1m--- a/validator/ipv4/ipv4.go[m
[1m+++ b/validator/ipv4/ipv4.go[m
[36m@@ -6,6 +6,7 @@[m [mpackage ipv4[m
 [m
 import ([m
 	"fmt"[m
[32m+[m	[32m"github.com/choria-io/go-choria/validator/shared"[m
 	"net"[m
 	"reflect"[m
 )[m
[36m@@ -29,3 +30,12 @@[m [mfunc ValidateStructField(value reflect.Value, tag string) (bool, error) {[m
 [m
 	return ValidateString(value.String())[m
 }[m
[32m+[m
[32m+[m[32mfunc init() {[m
[32m+[m	[32mshared.RegisterValidator("ipv4", func(v reflect.Value, t reflect.StructField, tag string) error {[m
[32m+[m		[32mif ok, err := ValidateStructField(v, tag); !ok {[m
[32m+[m			[32mreturn fmt.Errorf("%s IPv4 validation failed: %s", t.Name, err)[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil[m
[32m+[m	[32m}, false)[m
[32m+[m[32m}[m
[1mdiff --git a/validator/ipv6/ipv6.go b/validator/ipv6/ipv6.go[m
[1mindex 2b76476c..6fa1b30f 100644[m
[1m--- a/validator/ipv6/ipv6.go[m
[1m+++ b/validator/ipv6/ipv6.go[m
[36m@@ -6,6 +6,7 @@[m [mpackage ipv6[m
 [m
 import ([m
 	"fmt"[m
[32m+[m	[32m"github.com/choria-io/go-choria/validator/shared"[m
 	"net"[m
 	"reflect"[m
 )[m
[36m@@ -33,3 +34,12 @@[m [mfunc ValidateStructField(value reflect.Value, tag string) (bool, error) {[m
 [m
 	return ValidateString(value.String())[m
 }[m
[32m+[m
[32m+[m[32mfunc init() {[m
[32m+[m	[32mshared.RegisterValidator("ipv6", func(v reflect.Value, t reflect.StructField, tag string) error {[m
[32m+[m		[32mif ok, err := ValidateStructField(v, tag); !ok {[m
[32m+[m			[32mreturn fmt.Errorf("%s IPv6 validation failed: %s", t.Name, err)[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil[m
[32m+[m	[32m}, false)[m
[32m+[m[32m}[m
[1mdiff --git a/validator/maxlength/maxlength.go b/validator/maxlength/maxlength.go[m
[1mindex d50c6eed..429c8fa1 100644[m
[1m--- a/validator/maxlength/maxlength.go[m
[1m+++ b/validator/maxlength/maxlength.go[m
[36m@@ -6,6 +6,7 @@[m [mpackage maxlength[m
 [m
 import ([m
 	"fmt"[m
[32m+[m	[32m"github.com/choria-io/go-choria/validator/shared"[m
 	"reflect"[m
 	"regexp"[m
 	"strconv"[m
[36m@@ -46,3 +47,12 @@[m [mfunc ValidateStructField(value reflect.Value, tag string) (bool, error) {[m
 		return false, fmt.Errorf("cannot check length of %s type", value.Kind().String())[m
 	}[m
 }[m
[32m+[m
[32m+[m[32mfunc init() {[m
[32m+[m	[32mshared.RegisterValidator("maxlength", func(v reflect.Value, t reflect.StructField, tag string) error {[m
[32m+[m		[32mif ok, err := ValidateStructField(v, tag); !ok {[m
[32m+[m			[32mreturn fmt.Errorf("%s maxlength validation failed: %s", t.Name, err)[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil[m
[32m+[m	[32m}, true)[m
[32m+[m[32m}[m
[1mdiff --git a/validator/regex/regex.go b/validator/regex/regex.go[m
[1mindex 06b6e462..c5187357 100644[m
[1m--- a/validator/regex/regex.go[m
[1m+++ b/validator/regex/regex.go[m
[36m@@ -6,6 +6,7 @@[m [mpackage regex[m
 [m
 import ([m
 	"fmt"[m
[32m+[m	[32m"github.com/choria-io/go-choria/validator/shared"[m
 	"reflect"[m
 	"regexp"[m
 )[m
[36m@@ -40,3 +41,12 @@[m [mfunc ValidateStructField(value reflect.Value, tag string) (bool, error) {[m
 [m
 	return ValidateString(value.String(), parts[1])[m
 }[m
[32m+[m
[32m+[m[32mfunc init() {[m
[32m+[m	[32mshared.RegisterValidator("regex", func(v reflect.Value, t reflect.StructField, tag string) error {[m
[32m+[m		[32mif ok, err := ValidateStructField(v, tag); !ok {[m
[32m+[m			[32mreturn fmt.Errorf("%s regular expression validation failed: %s", t.Name, err)[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil[m
[32m+[m	[32m}, true)[m
[32m+[m[32m}[m
[1mdiff --git a/validator/shellsafe/shellsafe.go b/validator/shellsafe/shellsafe.go[m
[1mindex 95c417aa..61ae0aeb 100644[m
[1m--- a/validator/shellsafe/shellsafe.go[m
[1m+++ b/validator/shellsafe/shellsafe.go[m
[36m@@ -7,6 +7,7 @@[m [mpackage shellsafe[m
 import ([m
 	"errors"[m
 	"fmt"[m
[32m+[m	[32m"github.com/choria-io/go-choria/validator/shared"[m
 	"reflect"[m
 	"strings"[m
 )[m
[36m@@ -32,3 +33,12 @@[m [mfunc ValidateStructField(value reflect.Value, tag string) (bool, error) {[m
 [m
 	return Validate(value.String())[m
 }[m
[32m+[m
[32m+[m[32mfunc init() {[m
[32m+[m	[32mshared.RegisterValidator("shellsafe", func(v reflect.Value, t reflect.StructField, tag string) error {[m
[32m+[m		[32mif ok, err := ValidateStructField(v, tag); !ok {[m
[32m+[m			[32mreturn fmt.Errorf("%s shellsafe validation failed: %s", t.Name, err)[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil[m
[32m+[m	[32m}, false)[m
[32m+[m[32m}[m
[1mdiff --git a/validator/validator.go b/validator/validator.go[m
[1mindex 1ae3fae6..759297e3 100644[m
[1m--- a/validator/validator.go[m
[1m+++ b/validator/validator.go[m
[36m@@ -15,14 +15,17 @@[m [mimport ([m
 	"reflect"[m
 	"strings"[m
 [m
[31m-	"github.com/choria-io/go-choria/validator/duration"[m
[31m-	"github.com/choria-io/go-choria/validator/enum"[m
[31m-	"github.com/choria-io/go-choria/validator/ipaddress"[m
[31m-	"github.com/choria-io/go-choria/validator/ipv4"[m
[31m-	"github.com/choria-io/go-choria/validator/ipv6"[m
[31m-	"github.com/choria-io/go-choria/validator/maxlength"[m
[31m-	"github.com/choria-io/go-choria/validator/regex"[m
[31m-	"github.com/choria-io/go-choria/validator/shellsafe"[m
[32m+[m	[32m_ "github.com/choria-io/go-choria/validator/duration"[m
[32m+[m	[32m_ "github.com/choria-io/go-choria/validator/enum"[m
[32m+[m	[32m_ "github.com/choria-io/go-choria/validator/ipaddress"[m
[32m+[m	[32m_ "github.com/choria-io/go-choria/validator/ipv4"[m
[32m+[m	[32m_ "github.com/choria-io/go-choria/validator/ipv6"[m
[32m+[m	[32m_ "github.com/choria-io/go-choria/validator/maxduration"[m
[32m+[m	[32m_ "github.com/choria-io/go-choria/validator/maxlength"[m
[32m+[m	[32m_ "github.com/choria-io/go-choria/validator/regex"[m
[32m+[m	[32m_ "github.com/choria-io/go-choria/validator/shellsafe"[m
[32m+[m
[32m+[m	[32m"github.com/choria-io/go-choria/validator/shared"[m
 )[m
 [m
 // ValidateStruct validates all keys in a struct using their validate tag[m
[36m@@ -82,51 +85,18 @@[m [mfunc validateStructField(valueField reflect.Value, typeField reflect.StructField[m
 			return err[m
 		}[m
 	}[m
[31m-[m
 	if validation == "" {[m
 		return nil[m
 	}[m
[31m-[m
[31m-	if validation == "shellsafe" {[m
[31m-		if ok, err := shellsafe.ValidateStructField(valueField, validation); !ok {[m
[31m-			return fmt.Errorf("%s shellsafe validation failed: %s", typeField.Name, err)[m
[31m-		}[m
[31m-[m
[31m-	} else if validation == "ipv4" {[m
[31m-		if ok, err := ipv4.ValidateStructField(valueField, validation); !ok {[m
[31m-			return fmt.Errorf("%s IPv4 validation failed: %s", typeField.Name, err)[m
[31m-		}[m
[31m-[m
[31m-	} else if validation == "ipv6" {[m
[31m-		if ok, err := ipv6.ValidateStructField(valueField, validation); !ok {[m
[31m-			return fmt.Errorf("%s IPv6 validation failed: %s", typeField.Name, err)[m
[31m-		}[m
[31m-[m
[31m-	} else if validation == "ipaddress" {[m
[31m-		if ok, err := ipaddress.ValidateStructField(valueField, validation); !ok {[m
[31m-			return fmt.Errorf("%s IP address validation failed: %s", typeField.Name, err)[m
[31m-		}[m
[31m-[m
[31m-	} else if strings.HasPrefix(validation, "regex") {[m
[31m-		if ok, err := regex.ValidateStructField(valueField, validation); !ok {[m
[31m-			return fmt.Errorf("%s regular expression validation failed: %s", typeField.Name, err)[m
[31m-		}[m
[31m-[m
[31m-	} else if strings.HasPrefix(validation, "maxlength") {[m
[31m-		if ok, err := maxlength.ValidateStructField(valueField, validation); !ok {[m
[31m-			return fmt.Errorf("%s maxlength validation failed: %s", typeField.Name, err)[m
[31m-		}[m
[31m-[m
[31m-	} else if strings.HasPrefix(validation, "enum") {[m
[31m-		if ok, err := enum.ValidateStructField(valueField, validation); !ok {[m
[31m-			return fmt.Errorf("%s enum validation failed: %s", typeField.Name, err)[m
[31m-		}[m
[31m-[m
[31m-	} else if strings.HasPrefix(validation, "duration") {[m
[31m-		if ok, err := duration.ValidateStructField(valueField, validation); !ok {[m
[31m-			return fmt.Errorf("%s duration validation failed: %s", typeField.Name, err)[m
[32m+[m	[32m// Exact match[m
[32m+[m	[32mif entry, ok := shared.Validators[validation]; ok && !entry.Prefix {[m
[32m+[m		[32mreturn entry.Handler(valueField, typeField, validation)[m
[32m+[m	[32m}[m
[32m+[m	[32m// Prefix match[m
[32m+[m	[32mfor tag, entry := range shared.Validators {[m
[32m+[m		[32mif entry.Prefix && strings.HasPrefix(validation, tag) {[m
[32m+[m			[32mreturn entry.Handler(valueField, typeField, validation)[m
 		}[m
 	}[m
[31m-[m
 	return nil[m
 }[m
