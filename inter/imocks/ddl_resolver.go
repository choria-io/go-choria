// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/choria-io/go-choria/inter (interfaces: DDLResolver)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -destination ddl_resolver.go -package imock github.com/choria-io/go-choria/inter DDLResolver
//

// Package imock is a generated GoMock package.
package imock

import (
	context "context"
	reflect "reflect"

	inter "github.com/choria-io/go-choria/inter"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -destination ddl_resolver.go -package imock github.com/choria-io/go-choria/inter DDLResolver

// MockDDLResolver is a mock of DDLResolver interface.
type MockDDLResolver struct {
	ctrl     *gomock.Controller
	recorder *MockDDLResolverMockRecorder
	isgomock struct{}
}

// MockDDLResolverMockRecorder is the mock recorder for MockDDLResolver.
type MockDDLResolverMockRecorder struct {
	mock *MockDDLResolver
}

// NewMockDDLResolver creates a new mock instance.
func NewMockDDLResolver(ctrl *gomock.Controller) *MockDDLResolver {
	mock := &MockDDLResolver{ctrl: ctrl}
	mock.recorder = &MockDDLResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDDLResolver) EXPECT() *MockDDLResolverMockRecorder {
	return m.recorder
}

// DDL mocks base method.
func (m *MockDDLResolver) DDL(ctx context.Context, kind, name string, target any, fw inter.Framework) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DDL", ctx, kind, name, target, fw)
	ret0, _ := ret[0].(error)
	return ret0
}

// DDL indicates an expected call of DDL.
func (mr *MockDDLResolverMockRecorder) DDL(ctx, kind, name, target, fw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DDL", reflect.TypeOf((*MockDDLResolver)(nil).DDL), ctx, kind, name, target, fw)
}

// DDLBytes mocks base method.
func (m *MockDDLResolver) DDLBytes(ctx context.Context, kind, name string, fw inter.Framework) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DDLBytes", ctx, kind, name, fw)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DDLBytes indicates an expected call of DDLBytes.
func (mr *MockDDLResolverMockRecorder) DDLBytes(ctx, kind, name, fw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DDLBytes", reflect.TypeOf((*MockDDLResolver)(nil).DDLBytes), ctx, kind, name, fw)
}

// DDLNames mocks base method.
func (m *MockDDLResolver) DDLNames(ctx context.Context, kind string, w inter.Framework) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DDLNames", ctx, kind, w)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DDLNames indicates an expected call of DDLNames.
func (mr *MockDDLResolverMockRecorder) DDLNames(ctx, kind, w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DDLNames", reflect.TypeOf((*MockDDLResolver)(nil).DDLNames), ctx, kind, w)
}

// String mocks base method.
func (m *MockDDLResolver) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockDDLResolverMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDDLResolver)(nil).String))
}
