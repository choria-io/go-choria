// Code generated by MockGen. DO NOT EDIT.
// Source: ../connector_info.go
//
// Generated by this command:
//
//	mockgen -write_generate_directive -destination connector_info.go -package imock -source ../connector_info.go
//

// Package imock is a generated GoMock package.
package imock

import (
	reflect "reflect"

	nats "github.com/nats-io/nats.go"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -destination connector_info.go -package imock -source ../connector_info.go

// MockConnectorInfo is a mock of ConnectorInfo interface.
type MockConnectorInfo struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorInfoMockRecorder
	isgomock struct{}
}

// MockConnectorInfoMockRecorder is the mock recorder for MockConnectorInfo.
type MockConnectorInfoMockRecorder struct {
	mock *MockConnectorInfo
}

// NewMockConnectorInfo creates a new mock instance.
func NewMockConnectorInfo(ctrl *gomock.Controller) *MockConnectorInfo {
	mock := &MockConnectorInfo{ctrl: ctrl}
	mock.recorder = &MockConnectorInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorInfo) EXPECT() *MockConnectorInfoMockRecorder {
	return m.recorder
}

// ConnectedServer mocks base method.
func (m *MockConnectorInfo) ConnectedServer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedServer")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectedServer indicates an expected call of ConnectedServer.
func (mr *MockConnectorInfoMockRecorder) ConnectedServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedServer", reflect.TypeOf((*MockConnectorInfo)(nil).ConnectedServer))
}

// ConnectionOptions mocks base method.
func (m *MockConnectorInfo) ConnectionOptions() nats.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionOptions")
	ret0, _ := ret[0].(nats.Options)
	return ret0
}

// ConnectionOptions indicates an expected call of ConnectionOptions.
func (mr *MockConnectorInfoMockRecorder) ConnectionOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionOptions", reflect.TypeOf((*MockConnectorInfo)(nil).ConnectionOptions))
}

// ConnectionStats mocks base method.
func (m *MockConnectorInfo) ConnectionStats() nats.Statistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionStats")
	ret0, _ := ret[0].(nats.Statistics)
	return ret0
}

// ConnectionStats indicates an expected call of ConnectionStats.
func (mr *MockConnectorInfoMockRecorder) ConnectionStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionStats", reflect.TypeOf((*MockConnectorInfo)(nil).ConnectionStats))
}

// InboxPrefix mocks base method.
func (m *MockConnectorInfo) InboxPrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InboxPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// InboxPrefix indicates an expected call of InboxPrefix.
func (mr *MockConnectorInfoMockRecorder) InboxPrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InboxPrefix", reflect.TypeOf((*MockConnectorInfo)(nil).InboxPrefix))
}
