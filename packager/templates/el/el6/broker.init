#!/bin/bash
#
# Init script for {{cpkg_name}}-broker
#
### BEGIN INIT INFO
# Provides:          {{cpkg_name}}-broker
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# chkconfig:         {{cpkg_broker_start_runlevels}} {{cpkg_broker_start_order}} {{cpkg_broker_start_order}}
# Short-Description: Choria.IO Orchestration System Network Broker
# Description:       NATS based middleware, Federation Broker and Protocol Adapter for Choria.IO
### END INIT INFO

# source function library
. /etc/rc.d/init.d/functions

prog="{{cpkg_name}}-broker"
user="root"
exec="{{cpkg_bindir}}/{{cpkg_name}}"
pidfile="/var/run/${prog}.pid"
lockfile="/var/lock/subsys/${prog}"
logfile="/var/log/${prog}"
conffile="{{cpkg_etcdir}}/broker.conf"

# If you're going to change the value of $user for non-root operations, make sure you change the value of
# $pidfile and $logfile as well, otherwise you won't be able to start the daemon correctly.

# set the open file limit to allow over 1024 connections
ulimit -n 51200

# pull in sysconfig settings
[ -e /etc/sysconfig/${prog} ] && . /etc/sysconfig/${prog}

args="broker --config=${conffile} --pid=${pidfile} ${EXTRA_OPTS}"

start() {
    [ -x $exec ] || exit 5
    [ -f $conffile ] || exit 6
    [ -d $confdir ] || exit 6

    umask 077

    runuser "${user}" touch $logfile $pidfile

    echo -n $"Starting ${prog}: "

    daemon \
      --user=${user} \
      --pidfile=${pidfile} \
      " { nohup ${exec} ${args} > ${logfile} 2>&1 & }"

    RETVAL=$?
    echo

    [ $RETVAL -eq 0 ] && touch $lockfile

    return $RETVAL
}

stop() {
  echo -n $"Shutting down $prog: "

  if rh_status_q ; then
    pid=$(cat "$pidfile")
    kill -TERM $pid

    for i in 1 2 3 4 5 ; do
      rh_status_q || break
      sleep 1
    done

    if rh_status_q ; then
        echo "Timeout reached. Killing $prog (pid $pid) with SIGKILL."
        kill -KILL $pid
        echo "$prog killed with SIGKILL."
    else
      echo "$prog stopped."
    fi
  fi
}

restart() {
    stop
    sleep 1
    start
}

force_reload() {
    restart
}

rh_status() {
    status -p "$pidfile" -l $prog $exec
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|force-reload}"
        exit 2
esac

exit $?
