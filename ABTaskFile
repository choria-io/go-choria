name: build_tasks
description: Choria Build Tasks

commands:
    - name: dependencies
      type: parent
      description: Manage dependencies
      aliases: [d]
      commands:
        - name: update
          description: Update dependencies
          type: exec
          aliases: [up]
          dir: "{{ AppDir }}"
          flags:
            - name: verbose
              description: Log verbosely
              short: v
              bool: true
            - name: proxy
              description: Enable using go proxy
              bool: true
              default: "true"
          script: |
            . "{{ BashHelperPath }}"

            ab_announce Updating all dependencies
            echo

            {{ if eq .Flags.proxy false }}
            export GOPROXY=direct
            ab_say Disabling go mod proxy
            {{ end }}

            go get -u -n -a -t {{- if .Flags.verbose }} -d -x {{ end }} ./...

            ab_say Running go mod tidy

            go mod tidy

    - name: generate
      type: parent
      aliases: [gen]
      description: Performs 'go generate' tasks
      commands:
        - name: all
          description: Generates all files
          type: exec
          dir: "{{ AppDir }}"
          command: go generate

        - name: plugins
          description: Generate plugin files
          type: exec
          dir: "{{ AppDir }}"
          flags:
           - name: clean
             description: Removes existing plugin stubs
             bool: true
          script: |
            . "{{ BashHelperPath }}"

            {{ if .Flags.clean }}
            ab_announce Deleting existing plugin stubs
            rm -f plugin_*_*.go
            {{ end }}
            go generate -run plugin

        - name: config
          description: Generate configuration related files
          type: exec
          dir: "{{ AppDir }}"
          command: go generate -run config

        - name: clients
          description: Generate rpc clients related files
          type: exec
          dir: "{{ AppDir }}"
          command: go generate -run client

        - name: imocks
          description: Generate inter/imocks related files
          type: exec
          flags:
            - name: update
              description: Updates the mockgen runtime
              bool: true
          dir: "{{ AppDir }}"
          script: |
            set -e

            . "{{ BashHelperPath }}"

            {{ if .Flags.update }}
                  ab_say Updating mockgen binary
                  go install go.uber.org/mock/mockgen@latest
            {{ end }}

            ab_say "Generating imocks"

            go generate -run imocks

            ab_say "Generating broker mocks"
            cd ./broker/network
            mockgen -write_generate_directive -source network.go -destination network_mock_test.go -package network
            cd -

            ab_say "Generating config mocks"
            cd ./config
            mockgen -write_generate_directive -source mutators.go -package config -destination mutator_mock_test.go
            cd -

            ab_say "Generating puppetsec mocks"
            cd ./providers/security/puppetsec
            mockgen -write_generate_directive -source puppet_security.go -package puppetsec -destination resolver_mock_test.go
            cd -

            ab_say "Generating discovery client mocks"
            cd ./providers/discovery/broadcast
            mockgen -write_generate_directive -source broadcast.go -package broadcast -destination choria_client_mock_test.go
            cd -

            ab_say "Generating mcorpc mocks"
            cd ./providers/agent/mcorpc
            mockgen -write_generate_directive -package mcorpc -destination server_info_source_mock_test.go github.com/choria-io/go-choria/server/agents ServerInfoSource
            cd -

            ab_say "Generating external rpc provider mocks"
            cd ./providers/agent/mcorpc/external
            mockgen -write_generate_directive -destination server_info_source_mock_test.go -package external github.com/choria-io/go-choria/server/agents ServerInfoSource
            cd -

            ab_say "Generating rpc client mocks"
            cd ./providers/agent/mcorpc/client
            mockgen -write_generate_directive -destination choria_client_mock_test.go -source client.go -package client 
            cd -

            ab_say "Generating ruby rpc provider mocks"
            cd ./providers/agent/mcorpc/ruby
            mockgen -write_generate_directive -destination agentmanager_mock_test.go -package ruby github.com/choria-io/go-choria/server AgentManager
            cd -

            ab_say "Generating proftarget mocks"
            cd ./providers/provtarget
            mockgen -write_generate_directive -package provtarget -destination target_resolver_mock_test.go -source provtarget.go
            cd -

            ab_say "Generating message mocks"
            cd ./message
            mockgen -write_generate_directive -package message -destination protocol_mock_test.go -source ../protocol/protocol.go
            cd -

            ab_say "Generating server discovery mocks"
            cd ./server/discovery
            mockgen -write_generate_directive -package discovery -destination server_info_mock_test.go -source discovery.go
            cd -

            ab_say "Generating server mocks"
            cd ./server
            mockgen -write_generate_directive -package server -destination agentmanager_mock_test.go -source agents/agents.go
            cd -

            ab_say "Generating protocol mocks"
            cd ./protocol
            mockgen -write_generate_directive -package protocol -destination server_info_mock_test.go -source filter.go
            mockgen -write_generate_directive -package protocol -destination protocol_mock_test.go -source protocol.go
            cd -

            ab_say "Generating autonomous agent mocks"
            cd ./aagent/machine
            mockgen -write_generate_directive -package machine -destination notifications_mock_test.go -source notifications.go
            mockgen -write_generate_directive -package machine -destination machine_mock_test.go -source machine.go
            cd -
            cd ./aagent/model
            mockgen -package model -destination model_mock.go github.com/choria-io/go-choria/aagent/model Watcher,WatcherConstructor,ChoriaProvider,Machine
            cd -

            ab_say "Generating KV Watcher Mocks"
            mockgen -write_generate_directive -package kvwatcher -destination aagent/watchers/kvwatcher/kv_mock_test.go github.com/nats-io/nats.go KeyValue,KeyValueEntry 

            ab_say "Generating Watchers Mocks"
            cd ./aagent/watchers
            mockgen -write_generate_directive -package watchers -destination machine_mock_test.go github.com/choria-io/go-choria/aagent/watchers Machine
            cd -

    - name: test
      type: parent
      aliases: [t]
      description: Perform various tests
      commands:
        - name: unit
          type: exec
          description: Run ginkgo unit tests
          aliases: [u]
          arguments:
            - name: dir
              description: Directory to test
              default: .
          flags:
            - name: update
              description: Updates the ginkgo runtime
              bool: true
          script: |
            set -e

            . "{{ BashHelperPath }}"

            {{ if .Flags.update }}
                  ab_say Updating ginkgo binary
                  go install github.com/onsi/ginkgo/v2/ginkgo
            {{ end }}

            ginkgo -r --skip Integration {{ .Arguments.dir | escape }}

        - name: integration
          type: exec
          dir: "{{ AppDir }}"
          aliases: [i]
          description: Run ginkgo integration tests
          command: ginkgo -r integration

        - name: lint
          type: exec
          dir: "{{ AppDir }}"
          flags:
            - name: vet
              description: Perform go vet
              bool: true
              default: true
            - name: staticcheck
              description: Perform staticcheck
              bool: true
              default: true
            - name: update
              description: Updates lint dependencies
              bool: true
          script: |
            set -e

            . "{{ BashHelperPath }}"

            {{ if .Flags.update }}
              ab_say Updating linting tools
              go install github.com/client9/misspell/cmd/misspell@latest
              go install honnef.co/go/tools/cmd/staticcheck@latest
            {{ else }}
              echo ">>> Run with --update to install required commands"
              echo
            {{ end }}

            ab_say Formatting source files
            go fmt ./...

            ab_say Tidying go mod
            go mod tidy

            ab_say Checking spelling
            find . -type f -name "*.go" | xargs misspell -error -locale US -i flavour
            find docs/content -type f -name "*.md" | xargs misspell -error -locale US

            {{ if .Flags.vet }}
            ab_say Performing go vet
            go vet ./...
            {{ end }}

            {{ if .Flags.staticcheck }}
            ab_say Running staticcheck
            staticcheck ./...
            {{ end }}

    - name: docs
      type: parent
      description: Documentation related commands
      commands:
        - name: serve
          description: Serves documentation locally
          type: exec
          dir: "{{ AppDir }}"
          flags:
            - name: port
              description: The port to listen on
              default: "8081"
          command: hugo serve -p {{ .Flags.port }} -s docs

    - name: build
      type: parent
      aliases: [b]
      description: Code build steps
      commands:
        - name: binary
          description: Build a basic test binary
          type: exec
          dir: "{{ AppDir }}"
          aliases: [bin]
          banner: |
              >>>
              >>> Building 'go-choria' locally
              >>>
              >>>               Target: {{ if .Flags.target }}{{ .Flags.target }}{{else}}host{{end}}
              >>>     provisioning.jwt: {{ .Flags.provisioning }}
              >>>   Default Collective: {{.Flags.collective}}
              >>>
          flags:
            - name: target
              description: Target platform to build for
              enum: ["linux/amd64", "linux/arm64"]
              short: T
            - name: provisioning
              description: Path to the default provisioning.jwt
              default: /etc/choria/provisioning.jwt
            - name: collective
              description: Sets the default collective
              default: mcollective
            - name: verbose
              description: Logs packages being build
              bool: true
              short: v
          script: |
            set -e

            . "{{ BashHelperPath }}"

            {{ if eq .Flags.target "linux/amd64" }}
                export GOOS=linux
                export GOARCH=amd64
            {{ else if eq .Flags.target "linux/arm64" }}
                export GOOS=linux
                export GOARCH=arm64
            {{ end }}

            {{ if .Flags.verbose }}
            ab_say Packages being build
            {{ end }}

            go build \
              {{ if .Flags.verbose }}-v{{ end }} \
              -ldflags="-s -w \
                -X 'github.com/choria-io/go-choria/build.Version=0.98.0.$(date +%s)' \
                -X 'github.com/choria-io/go-choria/build.DefaultCollectives={{.Flags.collective}}' \
                {{ if .Flags.provisioning }}-X 'github.com/choria-io/go-choria/build.ProvisionJWTFile={{ .Flags.provisioning }}'{{ end }} \
                " -o go-choria

            ab_say Build completed

            echo
            ls -l go-choria
            echo
            file go-choria
            echo

        - name: release-docker
          description: Builds release docker container
          type: exec
          dir: "{{ AppDir }}"
          aliases: [rd]
          flags:
            - name: repo
              description: YUM Repository to use
              default: https://yum.eu.choria.io/release/el/release.repo
            - name: push
              description: Push the built images
              default: false
              bool: true
          script: |
            set -e

            . "{{ BashHelperPath }}"

            ab_announce Building release docker container using {{ .Flags.repo }}

            TAG=$(git tag --points-at HEAD|sed -e s/^v//)
            if [ -z "${TAG}" ]
            then
              ab_panic HEAD is not a tag
            fi

            docker build \
              --pull \
              --no-cache \
              --build-arg REPO={{ .Flags.repo | escape }} \
              --tag "choria/choria:${TAG}" \
              --tag "choria/choria:latest" \
              --tag "registry.choria.io/choria/choria:${TAG}" \
              --tag "registry.choria.io/choria/choria:latest" \
              .

            {{ if .Flags.push }}
              ab_say Pushing built containers
              docker push "choria/choria:${TAG}"
              docker push "choria/choria:latest"
              docker push "registry.choria.io/choria/choria:${TAG}"
              docker push "registry.choria.io/choria/choria:latest"
            {{ else }}
              ab_say Skipping container push
            {{ end }}
