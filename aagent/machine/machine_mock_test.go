// Code generated by MockGen. DO NOT EDIT.
// Source: machine.go
//
// Generated by this command:
//
//	mockgen -write_generate_directive -package machine -destination machine_mock_test.go -source machine.go
//

// Package machine is a generated GoMock package.
package machine

import (
	context "context"
	reflect "reflect"
	sync "sync"

	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -package machine -destination machine_mock_test.go -source machine.go

// MockWatcherManager is a mock of WatcherManager interface.
type MockWatcherManager struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherManagerMockRecorder
	isgomock struct{}
}

// MockWatcherManagerMockRecorder is the mock recorder for MockWatcherManager.
type MockWatcherManagerMockRecorder struct {
	mock *MockWatcherManager
}

// NewMockWatcherManager creates a new mock instance.
func NewMockWatcherManager(ctrl *gomock.Controller) *MockWatcherManager {
	mock := &MockWatcherManager{ctrl: ctrl}
	mock.recorder = &MockWatcherManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherManager) EXPECT() *MockWatcherManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockWatcherManager) Delete() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete")
}

// Delete indicates an expected call of Delete.
func (mr *MockWatcherManagerMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWatcherManager)(nil).Delete))
}

// NotifyStateChance mocks base method.
func (m *MockWatcherManager) NotifyStateChance() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyStateChance")
}

// NotifyStateChance indicates an expected call of NotifyStateChance.
func (mr *MockWatcherManagerMockRecorder) NotifyStateChance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyStateChance", reflect.TypeOf((*MockWatcherManager)(nil).NotifyStateChance))
}

// Run mocks base method.
func (m *MockWatcherManager) Run(arg0 context.Context, arg1 *sync.WaitGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockWatcherManagerMockRecorder) Run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWatcherManager)(nil).Run), arg0, arg1)
}

// SetMachine mocks base method.
func (m *MockWatcherManager) SetMachine(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachine indicates an expected call of SetMachine.
func (mr *MockWatcherManagerMockRecorder) SetMachine(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachine", reflect.TypeOf((*MockWatcherManager)(nil).SetMachine), arg0)
}

// WatcherState mocks base method.
func (m *MockWatcherManager) WatcherState(watcher string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatcherState", watcher)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// WatcherState indicates an expected call of WatcherState.
func (mr *MockWatcherManagerMockRecorder) WatcherState(watcher any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatcherState", reflect.TypeOf((*MockWatcherManager)(nil).WatcherState), watcher)
}
