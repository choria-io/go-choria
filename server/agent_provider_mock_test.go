// Code generated by MockGen. DO NOT EDIT.
// Source: agent_providers.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	config "github.com/choria-io/go-choria/config"
	inter "github.com/choria-io/go-choria/inter"
	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentProvider is a mock of AgentProvider interface.
type MockAgentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAgentProviderMockRecorder
}

// MockAgentProviderMockRecorder is the mock recorder for MockAgentProvider.
type MockAgentProviderMockRecorder struct {
	mock *MockAgentProvider
}

// NewMockAgentProvider creates a new mock instance.
func NewMockAgentProvider(ctrl *gomock.Controller) *MockAgentProvider {
	mock := &MockAgentProvider{ctrl: ctrl}
	mock.recorder = &MockAgentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentProvider) EXPECT() *MockAgentProviderMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockAgentProvider) Initialize(cfg *config.Config, log *logrus.Entry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize", cfg, log)
}

// Initialize indicates an expected call of Initialize.
func (mr *MockAgentProviderMockRecorder) Initialize(cfg, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockAgentProvider)(nil).Initialize), cfg, log)
}

// RegisterAgents mocks base method.
func (m *MockAgentProvider) RegisterAgents(ctx context.Context, mgr AgentManager, connector inter.AgentConnector, log *logrus.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAgents", ctx, mgr, connector, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAgents indicates an expected call of RegisterAgents.
func (mr *MockAgentProviderMockRecorder) RegisterAgents(ctx, mgr, connector, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgents", reflect.TypeOf((*MockAgentProvider)(nil).RegisterAgents), ctx, mgr, connector, log)
}

// Version mocks base method.
func (m *MockAgentProvider) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockAgentProviderMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockAgentProvider)(nil).Version))
}
