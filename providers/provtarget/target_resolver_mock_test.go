// Code generated by MockGen. DO NOT EDIT.
// Source: provtarget.go
//
// Generated by this command:
//
//	mockgen -write_generate_directive -package provtarget -destination target_resolver_mock_test.go -source provtarget.go
//

// Package provtarget is a generated GoMock package.
package provtarget

import (
	context "context"
	reflect "reflect"

	config "github.com/choria-io/go-choria/config"
	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -package provtarget -destination target_resolver_mock_test.go -source provtarget.go

// MockTargetResolver is a mock of TargetResolver interface.
type MockTargetResolver struct {
	ctrl     *gomock.Controller
	recorder *MockTargetResolverMockRecorder
	isgomock struct{}
}

// MockTargetResolverMockRecorder is the mock recorder for MockTargetResolver.
type MockTargetResolverMockRecorder struct {
	mock *MockTargetResolver
}

// NewMockTargetResolver creates a new mock instance.
func NewMockTargetResolver(ctrl *gomock.Controller) *MockTargetResolver {
	mock := &MockTargetResolver{ctrl: ctrl}
	mock.recorder = &MockTargetResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetResolver) EXPECT() *MockTargetResolverMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockTargetResolver) Configure(arg0 context.Context, arg1 *config.Config, arg2 *logrus.Entry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure", arg0, arg1, arg2)
}

// Configure indicates an expected call of Configure.
func (mr *MockTargetResolverMockRecorder) Configure(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockTargetResolver)(nil).Configure), arg0, arg1, arg2)
}

// Name mocks base method.
func (m *MockTargetResolver) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTargetResolverMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTargetResolver)(nil).Name))
}

// Targets mocks base method.
func (m *MockTargetResolver) Targets(arg0 context.Context, arg1 *logrus.Entry) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Targets", arg0, arg1)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Targets indicates an expected call of Targets.
func (mr *MockTargetResolverMockRecorder) Targets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Targets", reflect.TypeOf((*MockTargetResolver)(nil).Targets), arg0, arg1)
}
