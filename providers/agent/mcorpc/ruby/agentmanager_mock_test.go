// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/choria-io/go-choria/server (interfaces: AgentManager)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -destination agentmanager_mock_test.go -package ruby github.com/choria-io/go-choria/server AgentManager
//

// Package ruby is a generated GoMock package.
package ruby

import (
	context "context"
	reflect "reflect"

	inter "github.com/choria-io/go-choria/inter"
	agents "github.com/choria-io/go-choria/server/agents"
	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -destination agentmanager_mock_test.go -package ruby github.com/choria-io/go-choria/server AgentManager

// MockAgentManager is a mock of AgentManager interface.
type MockAgentManager struct {
	ctrl     *gomock.Controller
	recorder *MockAgentManagerMockRecorder
	isgomock struct{}
}

// MockAgentManagerMockRecorder is the mock recorder for MockAgentManager.
type MockAgentManagerMockRecorder struct {
	mock *MockAgentManager
}

// NewMockAgentManager creates a new mock instance.
func NewMockAgentManager(ctrl *gomock.Controller) *MockAgentManager {
	mock := &MockAgentManager{ctrl: ctrl}
	mock.recorder = &MockAgentManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentManager) EXPECT() *MockAgentManagerMockRecorder {
	return m.recorder
}

// Choria mocks base method.
func (m *MockAgentManager) Choria() inter.Framework {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Choria")
	ret0, _ := ret[0].(inter.Framework)
	return ret0
}

// Choria indicates an expected call of Choria.
func (mr *MockAgentManagerMockRecorder) Choria() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Choria", reflect.TypeOf((*MockAgentManager)(nil).Choria))
}

// Logger mocks base method.
func (m *MockAgentManager) Logger() *logrus.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockAgentManagerMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockAgentManager)(nil).Logger))
}

// RegisterAgent mocks base method.
func (m *MockAgentManager) RegisterAgent(ctx context.Context, name string, agent agents.Agent, conn inter.AgentConnector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAgent", ctx, name, agent, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAgent indicates an expected call of RegisterAgent.
func (mr *MockAgentManagerMockRecorder) RegisterAgent(ctx, name, agent, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgent", reflect.TypeOf((*MockAgentManager)(nil).RegisterAgent), ctx, name, agent, conn)
}

// ReplaceAgent mocks base method.
func (m *MockAgentManager) ReplaceAgent(name string, agent agents.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAgent", name, agent)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceAgent indicates an expected call of ReplaceAgent.
func (mr *MockAgentManagerMockRecorder) ReplaceAgent(name, agent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAgent", reflect.TypeOf((*MockAgentManager)(nil).ReplaceAgent), name, agent)
}

// UnregisterAgent mocks base method.
func (m *MockAgentManager) UnregisterAgent(name string, conn inter.AgentConnector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterAgent", name, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterAgent indicates an expected call of UnregisterAgent.
func (mr *MockAgentManagerMockRecorder) UnregisterAgent(name, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterAgent", reflect.TypeOf((*MockAgentManager)(nil).UnregisterAgent), name, conn)
}
