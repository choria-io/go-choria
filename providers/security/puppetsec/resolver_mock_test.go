// Code generated by MockGen. DO NOT EDIT.
// Source: puppet_security.go
//
// Generated by this command:
//
//	mockgen -write_generate_directive -source puppet_security.go -package puppetsec -destination resolver_mock_test.go
//

// Package puppetsec is a generated GoMock package.
package puppetsec

import (
	reflect "reflect"

	srvcache "github.com/choria-io/go-choria/srvcache"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -source puppet_security.go -package puppetsec -destination resolver_mock_test.go

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
	isgomock struct{}
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// QuerySrvRecords mocks base method.
func (m *MockResolver) QuerySrvRecords(records []string) (srvcache.Servers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySrvRecords", records)
	ret0, _ := ret[0].(srvcache.Servers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySrvRecords indicates an expected call of QuerySrvRecords.
func (mr *MockResolverMockRecorder) QuerySrvRecords(records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySrvRecords", reflect.TypeOf((*MockResolver)(nil).QuerySrvRecords), records)
}

// MockBuildInfoProvider is a mock of BuildInfoProvider interface.
type MockBuildInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBuildInfoProviderMockRecorder
	isgomock struct{}
}

// MockBuildInfoProviderMockRecorder is the mock recorder for MockBuildInfoProvider.
type MockBuildInfoProviderMockRecorder struct {
	mock *MockBuildInfoProvider
}

// NewMockBuildInfoProvider creates a new mock instance.
func NewMockBuildInfoProvider(ctrl *gomock.Controller) *MockBuildInfoProvider {
	mock := &MockBuildInfoProvider{ctrl: ctrl}
	mock.recorder = &MockBuildInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildInfoProvider) EXPECT() *MockBuildInfoProviderMockRecorder {
	return m.recorder
}

// ClientIdentitySuffix mocks base method.
func (m *MockBuildInfoProvider) ClientIdentitySuffix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientIdentitySuffix")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientIdentitySuffix indicates an expected call of ClientIdentitySuffix.
func (mr *MockBuildInfoProviderMockRecorder) ClientIdentitySuffix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientIdentitySuffix", reflect.TypeOf((*MockBuildInfoProvider)(nil).ClientIdentitySuffix))
}
